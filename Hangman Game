{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading word list from file...\n",
      "  55909 words loaded.\n",
      "Welcome to the game, hangman!\n",
      "I am thinking of a word that is 5 letters long.\n",
      "You have 8 guesses left.\n",
      "Available letters: abcdefghijklmnopqrstuvwxyz\n",
      "Please guess a letter: \n",
      "a\n",
      "Good guess: _ _ a _ _ \n",
      "You have 8 guesses left.\n",
      "Available letters: bcdefghijklmnopqrstuvwxyz\n",
      "Please guess a letter: \n",
      "e\n",
      "Oops! That letter is not in my word: _ _ a _ _ \n",
      "You have 7 guesses left.\n",
      "Available letters: bcdfghijklmnopqrstuvwxyz\n",
      "Please guess a letter: \n",
      "o\n",
      "Oops! That letter is not in my word: _ _ a _ _ \n",
      "You have 6 guesses left.\n",
      "Available letters: bcdfghijklmnpqrstuvwxyz\n",
      "Please guess a letter: \n",
      "i\n",
      "Good guess: _ _ a i _ \n",
      "You have 6 guesses left.\n",
      "Available letters: bcdfghjklmnpqrstuvwxyz\n",
      "Please guess a letter: \n",
      "u\n",
      "Oops! That letter is not in my word: _ _ a i _ \n",
      "You have 5 guesses left.\n",
      "Available letters: bcdfghjklmnpqrstvwxyz\n",
      "Please guess a letter: \n",
      "l\n",
      "Good guess: _ l a i _ \n",
      "You have 5 guesses left.\n",
      "Available letters: bcdfghjkmnpqrstvwxyz\n",
      "Please guess a letter: \n",
      "s\n",
      "Oops! That letter is not in my word: _ l a i _ \n",
      "You have 4 guesses left.\n",
      "Available letters: bcdfghjkmnpqrtvwxyz\n",
      "Please guess a letter: \n",
      "d\n",
      "Oops! That letter is not in my word: _ l a i _ \n",
      "You have 3 guesses left.\n",
      "Available letters: bcfghjkmnpqrtvwxyz\n",
      "Please guess a letter: \n",
      "n\n",
      "Oops! That letter is not in my word: _ l a i _ \n",
      "You have 2 guesses left.\n",
      "Available letters: bcfghjkmpqrtvwxyz\n",
      "Please guess a letter: \n",
      "\n",
      "Good guess: _ l a i _ \n",
      "You have 2 guesses left.\n",
      "Available letters: bcfghjkmpqrtvwxyz\n",
      "Please guess a letter: \n",
      "p\n",
      "Good guess: p l a i _ \n",
      "You have 2 guesses left.\n",
      "Available letters: bcfghjkmqrtvwxyz\n",
      "Please guess a letter: \n",
      "t\n",
      "Good guess: p l a i t \n",
      "Congratulations, you won!\n",
      "Thank you for playing, hangman!\n"
     ]
    }
   ],
   "source": [
    "# Hangman game\n",
    "\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "WORDLIST_FILENAME = \"words.txt\"\n",
    "\n",
    "\n",
    "def loadWords():\n",
    "    \"\"\"\n",
    "    Returns a list of valid words. Words are strings of lowercase letters.\n",
    "    \n",
    "    Depending on the size of the word list, this function may\n",
    "    take a while to finish.\n",
    "    \"\"\"\n",
    "    print(\"Loading word list from file...\")\n",
    "    # inFile: file\n",
    "    inFile = open(WORDLIST_FILENAME, 'r')\n",
    "    # line: string\n",
    "    line = inFile.readline()\n",
    "    # wordlist: list of strings\n",
    "    wordlist = line.split()\n",
    "    print(\" \", len(wordlist), \"words loaded.\")\n",
    "    return wordlist\n",
    "\n",
    "def chooseWord(wordlist):\n",
    "    \"\"\"\n",
    "    wordlist (list): list of words (strings)\n",
    "\n",
    "    Returns a word from wordlist at random\n",
    "    \"\"\"\n",
    "    return random.choice(wordlist)\n",
    "\n",
    "\n",
    "wordlist = loadWords()\n",
    "\n",
    "def isWordGuessed(secretWord, lettersGuessed):\n",
    "    '''\n",
    "    secretWord: string, the word the user is guessing\n",
    "    lettersGuessed: list, what letters have been guessed so far\n",
    "    returns: boolean, True if all the letters of secretWord are in lettersGuessed;\n",
    "      False otherwise\n",
    "    '''\n",
    "    return all(item in list(lettersGuessed) for item in secretWord)\n",
    "\n",
    "\n",
    "def getGuessedWord(secretWord, lettersGuessed):\n",
    "    '''\n",
    "    secretWord: string, the word the user is guessing\n",
    "    lettersGuessed: list, what letters have been guessed so far\n",
    "    returns: string, comprised of letters and underscores that represents\n",
    "      what letters in secretWord have been guessed so far.\n",
    "    '''\n",
    "    current_word = str()\n",
    "    \n",
    "    for i in range(len(secretWord)):\n",
    "        if secretWord[i] in lettersGuessed:\n",
    "            current_word += secretWord[i]+' '\n",
    "        else:\n",
    "            current_word += '_ '\n",
    "    \n",
    "    return current_word\n",
    "\n",
    "\n",
    "def getAvailableLetters(lettersGuessed):\n",
    "    '''\n",
    "    lettersGuessed: list, what letters have been guessed so far\n",
    "    returns: string, comprised of letters that represents what letters have not\n",
    "      yet been guessed.\n",
    "    '''\n",
    "    import string\n",
    "    letters = string.ascii_lowercase\n",
    "    remainaing_letters = str()\n",
    "    \n",
    "    for i in list(letters):\n",
    "        if i in lettersGuessed:\n",
    "            continue\n",
    "        else:\n",
    "            remainaing_letters+=i\n",
    "    \n",
    "    return remainaing_letters\n",
    "    \n",
    "\n",
    "def hangman(secretWord):\n",
    "    '''\n",
    "    secretWord: string, the secret word to guess.\n",
    "\n",
    "    Starts up an interactive game of Hangman.\n",
    "\n",
    "    * At the start of the game, let the user know how many \n",
    "      letters the secretWord contains.\n",
    "\n",
    "    * Ask the user to supply one guess (i.e. letter) per round.\n",
    "\n",
    "    * The user should receive feedback immediately after each guess \n",
    "      about whether their guess appears in the computers word.\n",
    "\n",
    "    * After each round, you should also display to the user the \n",
    "      partially guessed word so far, as well as letters that the \n",
    "      user has not yet guessed.\n",
    "\n",
    "    Follows the other limitations detailed in the problem write-up.\n",
    "    '''\n",
    "    print('Welcome to the game, hangman!')\n",
    "    print('I am thinking of a word that is '+str(len(secretWord))+' letters long.')\n",
    "    \n",
    "    GuessCount = 8\n",
    "    lettersGuessed = []\n",
    "    \n",
    "    while GuessCount > 0:\n",
    "        if isWordGuessed(secretWord, lettersGuessed) == True:\n",
    "            print('Congratulations, you won!')\n",
    "            break \n",
    "        else: \n",
    "            print('You have '+str(GuessCount)+' guesses left.')\n",
    "            print('Available letters: '+getAvailableLetters(lettersGuessed))\n",
    "            print('Please guess a letter: ') \n",
    "            guess = input()\n",
    "            if guess not in getAvailableLetters(lettersGuessed):\n",
    "                print('Oops! You have already guessed that letter: '+getGuessedWord(secretWord, lettersGuessed))\n",
    "            elif guess in secretWord:\n",
    "                lettersGuessed.append(guess)\n",
    "                print('Good guess: '+getGuessedWord(secretWord, lettersGuessed))\n",
    "            else:\n",
    "                GuessCount -= 1\n",
    "                lettersGuessed.append(guess)\n",
    "                print('Oops! That letter is not in my word: '+getGuessedWord(secretWord, lettersGuessed))\n",
    "    \n",
    "    if GuessCount == 0:\n",
    "        print('Unfortunately, you ran out of guesses and have lost the game :-/')\n",
    "    \n",
    "    print('Thank you for playing, hangman!')\n",
    "    \n",
    "\n",
    "secretWord = chooseWord(wordlist).lower()\n",
    "hangman(secretWord)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
